{"version":3,"sources":["helpers.js","Characters.js","Blocks.js","Emojis.js","About.js","App.js","registerServiceWorker.js","index.js"],"names":["helpers","urlName","string","toLowerCase","replace","cleanName","cleanScriptName","CharacterPage","_ref","codepoint","match","params","name","console","log","details","getCharacters","find","x","code","react_default","a","createElement","key","className","String","fromCodePoint","CharacterBoxLarge","cat","bidi","decompType","decomp","oldName","upper","lower","title","blocks","getBlocks","BlockGrid","_ref2","block","blockName","start","startCode","end","endCode","CharactersGrid","characters","filter","map","char","lib","style","textDecoration","to","pathname","BlocksList","Route","path","concat","url","component","exact","render","uname","Link","emojis","forEach","emoji","annotation","customName","EmojiDetails","decimallinks","hexcode","split","Number","parseInt","order","shortcodes","join","tags","emoticon","generateEmoticonPermutations","skins","JSON","stringify","EmojiList","EmojiBox","AboutPage","href","id","target","App","HashRouter","es","fixedTop","Header","Brand","Toggle","Collapse","pullRight","Home","Blocks","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.59544c01.chunk.js","sourcesContent":["function urlName(string) {\n  return string.toLowerCase().replace(/[^a-z0-9]+/g,'-');;\n}\n\nfunction cleanName(string) {\n  return string.toLowerCase().replace(/[^a-z0-9]+/g,' ');;\n}\n\nfunction cleanScriptName(string) {\n  return string.replace(/_/g,' ');;\n}\n\nexport default {urlName, cleanName, cleanScriptName};","import React from 'react';\nimport {LinkContainer} from 'react-router-bootstrap';\n\n// import helpers from './helpers.js';\n\nimport {getCharacters} from 'unidata10';\n\n\nconst CharacterBox = (codepoint) => {\n  // const name = unicharadata.lookupname(symbol);\n  // const cleanName = helpers.cleanName(name);\n  // const urlName = helpers.urlName(name);\n//   const urlName = symbol;\n  return (\n    <LinkContainer \n        style={{ textDecoration: 'none' }}\n        to={{\n          pathname: '/characters/' + codepoint\n        }}\n      >\n      <div key={codepoint} className=\"character-box\">\n      \n        {String.fromCodePoint(codepoint)}\n\n      </div>      \n    </LinkContainer>\n\n  );\n}\n\nconst CharacterBoxLarge = (codepoint) => {\n  // const name = unicharadata.lookupname(symbol);\n  // const cleanName = helpers.cleanName(name);\n  // const urlName = helpers.urlName(name);\n//   const urlName = symbol;\n  return (\n    <div key={codepoint} className=\"character-box-large\">\n      {String.fromCodePoint(codepoint)}\n    </div>      \n  );\n}\n\nconst CharacterPage = ({ match }) => {\n  const codepoint = match.params.name;\n  console.log(codepoint);\n  const details = getCharacters().find(x=>x.code == codepoint);\n\n  return (\n    <div>\n      <h1>Characters</h1>\n      <h2>{details.name}</h2>\n      {CharacterBoxLarge(codepoint)}\n      <ul>\n        <li><strong>Name:</strong> {details.name}</li>\n        {/* <li><strong>Hex:</strong> {details.code}</li> */}\n        <li><strong>Decimal:</strong> {details.code}</li>\n        <li><strong>Category:</strong> {details.cat}</li>\n        {details.bidi && <li><strong>Bidirectional category:</strong> {details.bidi}</li>}\n        {details.decompType && <li><strong>Decomposition type:</strong> {details.decompType}</li>}\n        {details.decomp && <li><strong>Decomposition mapping:</strong> {details.decomp}</li>}\n        {details.oldName && <li><strong>Old name:</strong> {details.oldName}</li>}\n        {details.upper && <li><strong>Uppercase:</strong> {details.upper}</li>}\n        {details.lower && <li><strong>Lowercase:</strong> {details.lower}</li>}\n        {details.title && <li><strong>Title case:</strong> {details.title}</li>}\n\n      </ul>\n      {/* <br/> */}\n      {/* <pre>{JSON.stringify(details, null, '\\t')}</pre> */}\n    </div>\n  );\n}\n\n\nexport {CharacterBox, CharacterBoxLarge, CharacterPage};","import React from 'react';\nimport {\n  Route,\n  Link\n} from 'react-router-dom';\n\n// import unicode from 'unicode-10.0.0';\nimport {getBlocks, getCharacters} from 'unidata10';\n\nimport helpers from './helpers';\nimport {CharacterBox} from './Characters';\n\nconst blocks = getBlocks();\n\n// const unicharadata = require(\"unicharad/ata\");\n// import unicharadata from 'unicharadata';\n\nconst BlocksList = ({ match }) => {\n  // console.log(unicode);\n\n  // let type = \"Script\"\n  // if (match.path.includes('scripts')) {\n  //   type = 'Script';\n  // } else if (match.path.includes('blocks')) {\n  //   type = 'Block';\n  // }\n\n  return (\n    <div>\n      <h1>Character Blocks</h1>\n\n      <Route path={`${match.url}/:name`}  component={BlockGrid}/>\n\n      <Route exact path={match.url} render={() => (\n        <div>\n          {blocks.map(block => {\n            const uname = helpers.urlName(block.blockName)\n            return(\n              <div key={block.blockName}>\n                <Link to={{\n                  pathname: match.url + '/' + uname\n                }}>\n                  {block.blockName}\n                </Link>\n\n              </div>\n            )\n          })}\n        </div>\n      )}/>\n\n    </div>\n  );\n}\n\nconst BlockGrid = ({ match }) => {\n\n  const urlName = match.params.name;\n  const block = blocks.find(x => (helpers.urlName(x.blockName) === urlName));\n  const start = block.startCode;\n  const end = block.endCode;\n\n  return(\n    <div>\n      <h2>{block.blockName}</h2>\n      {CharactersGrid(start, end)}\n    </div>\n  );\n}\n\nconst CharactersGrid = (start, end) => {\n\n  // const codePoints = require('unicode-10.0.0/Script/' + scriptName + '/code-points');\n  // const symbols = require('unicode-10.0.0/' + type + '/' + scriptName + '/symbols');\n\n  const characters = getCharacters().filter(x => (x.code >= start && x.code <= end));\n\n  return(\n    <div>\n      {characters.map(char => (CharacterBox(char.code)))}\n    </div>\n  );\n\n}\n\nexport default BlocksList;","import React from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport concatMap from 'concat-map';\n\nimport helpers from './helpers.js';\n\nimport emojis from 'emojibase-data/en/data.json';\nimport { generateEmoticonPermutations } from 'emojibase';\n// import compact from 'emojibase-data/en/compact.json';\n\n\nemojis.forEach(emoji => {\n  if (emoji.annotation) {\n    emoji.urlName = helpers.urlName(emoji.annotation);\n    // emoji.cleanName = helpers.cleanName(emoji.annotation);\n    emoji.customName = emoji.annotation;\n  } else {\n    emoji.urlName = helpers.urlName(emoji.name);\n    // emoji.cleanName = helpers.cleanName(emoji.name);\n    emoji.customName = helpers.cleanName(emoji.name);\n  }\n})\n\n// const details = emojis.map(emoji => {\n//   <pre>{JSON.stringify(emoji)}</pre>\n// });\n\nconst EmojiBox = (emoji) => {\n  return (\n    <LinkContainer\n      style={{ textDecoration: 'none' }}\n      to={{\n        pathname: '/emoji/' + emoji.urlName\n      }}\n    >\n      <div key={emoji.order} className=\"character-box\">\n        {emoji.emoji}\n      </div>\n    </LinkContainer>\n\n  );\n}\n\nconst EmojiBoxLarge = (emoji) => {\n  return (\n    <div key={emoji.order} className=\"character-box-large\">\n        {emoji.emoji}\n    </div>\n  );\n}\n\nconst EmojiList = ({ match }) => (\n  <div>\n    <h1>Emoji</h1>\n\n    <Route path={`${match.url}/:name`}  component={EmojiDetails}/>\n    <Route exact path={match.url} render={() => (\n      <div>\n        {emojis.map(emoji => EmojiBox(emoji))}\n      </div>\n    )}/>\n\n\n  </div>\n);\n\nconst EmojiDetails = ({ match }) => {\n  let details;\n  let urlName = match.params.name\n  details = emojis.find(emoji => (emoji.urlName === urlName));\n\n  if (!details) {\n    return (\n    <div>\n      <p>Emoji not found.</p>\n    </div>\n  );\n  }\n\n  let hexchars = details.hexcode.split(\"-\");\n  let decimalchars = hexchars.map(x => Number.parseInt(x, 16));\n  let decimallinks = decimalchars.map(x => (\n    <Link to={{pathname: '/characters/' + x}}>{x} </Link>\n  ));\n\n  return (\n    <div>\n      <h2>{details.customName}</h2>\n      {EmojiBoxLarge(details)}\n      <ul>\n        <li><strong>Name:</strong> {details.name}</li>\n        {details.annotation && <li><strong>Annotation:</strong> {details.annotation}</li>}\n        {details.shortcodes && <li><strong>Shortcodes:</strong> {details.shortcodes.join(\", \")}</li>}\n        {details.tags && <li><strong>Tags:</strong> {details.tags.join(\", \")}</li>}\n        {details.emoticon && <li><strong>Emoticon:</strong> {details.emoticon}\n          <ul>\n            <li><em>Alternatively</em>,: {generateEmoticonPermutations(details.emoticon).join(\", \")}</li>\n          </ul>\n        </li>}\n        <li><strong>Hex: {details.hexcode}</strong></li>\n        <li><strong>Decimal: {decimallinks}</strong></li>\n        {details.skins && <li><strong>Skin variations:</strong> <pre>{JSON.stringify(details.skins, null, '\\t')}</pre></li>}\n      </ul>\n      {/* <br/> */}\n      {/* <pre>{JSON.stringify(details, null, '\\t')}</pre> */}\n    </div>\n  );\n}\n\n\nexport default EmojiList;","import React from 'react';\nimport {\n  Route,\n  Link\n} from 'react-router-dom';\n\nimport helpers from './helpers';\n\nconst AboutPage = () => (\n  <div>\n    <h1>About</h1>\n    <p>\n    Explore the Unicode character set!\n    </p>\n    <p>\n    See all the the characters in a specific block, such as <a href=\"#/blocks/cuneiform\">Cuneiform</a> or <a href=\"#/blocks/cherokee\">Cherokee</a>. Learn about a specific character such as <a href=\"#/characters/77952\">𓂀</a>. See <a href=\"#/emoji\">all the emoji</a>, or view details about <a href=\"#/emoji/smiling-face-with-horns\">😈</a>.\n    </p>\n    <h1 id=\"background\">Background</h1>\n    <p>This web app was built by <a href=\"https://ben.weinshel.net/\" target=\"_blank\">Ben Weinshel</a> as a final project for the Code Making, Code Breaking course at UChicago (LING 26040 Autumn 2017). It allows for exploration of Unicode characters and emojis, and for emoji in specific provides detail about multi-codepoint sequences and character variations.</p>\n    <p>There are a handful of tools out there that allow you to explore Unicode, such as the <a href=\"https://www.unicode.org/charts/\">official Unicode code tables</a>, <a href=\"http://www.decodeunicode.org\">decodeunicode</a>, <a href=\"https://unicodelookup.com/\">Unicode Lookup</a>, and <a href=\"https://emojipedia.org/\">Emojipedia</a>, but they either are slow to use, difficult to browse, or don’t provide info about multi-codepoint characters. Many emoji are constructed as a sequence of codepoints and not just one character, such as <a href=\"#/emoji/family-woman-woman-boy\">👩‍👩‍👦 family: woman, woman, boy</a>, which is actually composed of five characters <code>1F469-200D-1F469-200D-1F466</code> (woman, zero-width joiner, woman, zero-width joiner, boy), but is displayed to the user as one character.</p>\n    <h1 id=\"technical-implementation\">Technical Implementation</h1>\n    <h2 id=\"web-app\">Web App</h2>\n    <p>The web app is built in JavaScript using the React framework and is rendered completely client-side. It uses two external libraries to source information about Unicode characters and emoji, and from that generates clickable tables with groups of characters and detail pages for characters and emoji. The character pages show basic information about each character, and the emoji pages provide more rich information (due to a more detailed data source).</p>\n    <p><strong>Example pages:</strong></p>\n    <ul>\n    <li>Character block table: <a href=\"#/blocks/egyptian-hieroglyphs\">Egyptian Hieroglyphs</a></li>\n    <li>Character detail page: <a href=\"#/characters/2878\">ା ORIYA VOWEL SIGN AA</a></li>\n    <li>Emoji detail page: <a href=\"#/emoji/woman-singer\">👩‍🎤 woman singer</a></li>\n    </ul>\n    <h2 id=\"data-sources\">Data Sources</h2>\n    <p>The character tables and the emoji tables are sourced from third-party libraries that provide processed versions of the character data published by the Unicode Consortium.</p>\n    <p>The emojis are sourced from the <a href=\"https://github.com/milesj/emojibase\">Emojibase</a> JavaScript library, which provides every imaginable detail about every emoji, including skin tone variations, alternative names, tags, and emoticon equivalents. The library provides <a href=\"https://github.com/milesj/emojibase#data-structure\">data structures</a> with the emoji information, and I wrote the frontend to display the grid and then to display the character detail page.</p>\n    <p>It was slightly more difficult to find a good source for the rest of the Unicode characters; while the Unicode Consortium provides a <a href=\"https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt\">text file</a> with the name and code points of every character, that data doesn’t provide exhaustive information about every character and isn’t in a format that is easily incorporated into the rest of the code. I eventually settled on a library called <a href=\"https://github.com/chbrown/unidata\">unidata</a> to get the character data, which it provides with data structures that make it easy to navigate by block. I had to <a href=\"https://github.com/weinshel/unidata/commit/c4fe4ca828d0f8c26693eb4b97e038a7810c8ba5\">update the library for Unicode 10</a>, which involved downloading the newest official Unicode data file, and then figuring out how to run the library’s build scripts, but once that was done I was able to write my web app to automatically generate the list of character blocks, grids of characters, and info pages for each character.</p>\n    <p>I looked into a number of other JavaScript libraries including <a href=\"https://github.com/mathiasbynens/node-unicode-data\">node-unicode-data</a>, <a href=\"https://github.com/bellbind/unicharadata\">unichardata</a>, and <a href=\"https://github.com/mathiasbynens/unicode-data\">unicode-data</a> (which I even went though the work of updating for Unicode 10), which had some combination of more detail for each character or other advantages, but the data structures they provided didn’t end up being easy to fit into my code.</p>\n    <p>Long-term, I would like to improve this project by finding additional data sources with more detail for individual characters, and polishing up the presentation and interface, both for the navigational pages and the character details (especially with emoji skins). Additionally, I would like to provide the character escapes for multiple programming languages (HTML, JavaScript, Python, etc. all have different ways you include non-ASCII characters in code), which would make this a useful developer tool.</p>\n  </div>\n);\n\nexport default AboutPage;","import React, { Component } from 'react';\nimport {\n  HashRouter,\n  Route,\n  Link\n} from 'react-router-dom';\nimport {LinkContainer} from 'react-router-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\n\n// import Scripts from './Scripts';\nimport Blocks from './Blocks';\nimport EmojiList from  './Emojis';\nimport AboutPage from './About'\nimport {CharacterPage} from './Characters';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return(\n      <HashRouter>\n        <div>\n          <Navbar fixedTop>\n            <Navbar.Header>\n              <LinkContainer to=\"/\">\n                <Navbar.Brand>\n                  Unicode Explorer\n                </Navbar.Brand>\n              </LinkContainer>\n              <Navbar.Toggle />\n            </Navbar.Header>\n            <Navbar.Collapse>\n              <Nav>\n                <LinkContainer to=\"/blocks\">\n                  <NavItem>\n                    Character Blocks\n                  </NavItem>\n                </LinkContainer>\n                <LinkContainer to=\"/emoji\">\n                  <NavItem>\n                    Emoji\n                  </NavItem>\n                </LinkContainer>\n              </Nav>\n              <Nav pullRight>\n                <LinkContainer to=\"/about\">\n                  <NavItem>\n                    About\n                  </NavItem>\n                </LinkContainer>\n                <NavItem href=\"https://github.com/weinshel/unicodeexplorer\" target=\"_blank\">GitHub</NavItem>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          \n          <div className=\"container containerInner\">\n            <Route exact path=\"/\" component={Home}/>\n            {/* <Route path=\"/scripts\" component={Scripts}/> */}\n            <Route path=\"/blocks\" component={Blocks}/>\n            <Route path=\"/emoji\" component={EmojiList}/>\n            <Route path=\"/characters/:name\" component={CharacterPage}/>\n            <Route path=\"/about\" component={AboutPage}/>\n          </div>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nconst Home = () => (\n  <div>\n    <h1>Unicode Explorer</h1>\n    <div className=\"homeText\">\n      <p>Explore the Unicode character set!</p>\n      <p>See all the the characters in a specific block, such as <Link to={{pathname: '/blocks/cuneiform'}}>Cuneiform</Link> or <Link to={{pathname: '/blocks/cherokee'}}>Cherokee</Link>. Learn about a specific character such as <Link to={{pathname: '/characters/77952'}}>𓂀</Link>. See <Link to={{pathname: '/emoji'}}>all the emoji</Link>, or view details about <Link to={{pathname: '/emoji/smiling-face-with-horns'}}>😈</Link>.</p>\n    </div>\n  </div>\n)\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}